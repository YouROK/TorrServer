[{"/tmp/TorrServer/web/src/index.js":"1","/tmp/TorrServer/web/src/App.js":"2","/tmp/TorrServer/web/src/components/Appbar.js":"3","/tmp/TorrServer/web/src/components/TorrentList.js":"4","/tmp/TorrServer/web/src/components/Add.js":"5","/tmp/TorrServer/web/src/components/RemoveAll.js":"6","/tmp/TorrServer/web/src/components/Settings.js":"7","/tmp/TorrServer/web/src/components/About.js":"8","/tmp/TorrServer/web/src/components/Upload.js":"9","/tmp/TorrServer/web/src/components/Donate.js":"10","/tmp/TorrServer/web/src/utils/Hosts.js":"11","/tmp/TorrServer/web/src/components/Torrent.js":"12","/tmp/TorrServer/web/src/utils/Utils.js":"13","/tmp/TorrServer/web/src/components/DialogTorrentInfo.js":"14","/tmp/TorrServer/web/src/components/DialogCacheInfo.js":"15"},{"size":224,"mtime":1615292681565,"results":"16","hashOfConfig":"17"},{"size":840,"mtime":1615292681565,"results":"18","hashOfConfig":"17"},{"size":6552,"mtime":1615292681565,"results":"19","hashOfConfig":"17"},{"size":1568,"mtime":1615292681565,"results":"20","hashOfConfig":"17"},{"size":3345,"mtime":1615292681565,"results":"21","hashOfConfig":"17"},{"size":1416,"mtime":1615292681565,"results":"22","hashOfConfig":"17"},{"size":9004,"mtime":1615297130912,"results":"23","hashOfConfig":"17"},{"size":2278,"mtime":1615292681565,"results":"24","hashOfConfig":"17"},{"size":1348,"mtime":1615292681565,"results":"25","hashOfConfig":"17"},{"size":3634,"mtime":1615292681565,"results":"26","hashOfConfig":"17"},{"size":796,"mtime":1615292681565,"results":"27","hashOfConfig":"17"},{"size":7140,"mtime":1615292681565,"results":"28","hashOfConfig":"17"},{"size":419,"mtime":1615292681565,"results":"29","hashOfConfig":"17"},{"size":6787,"mtime":1615292681565,"results":"30","hashOfConfig":"17"},{"size":4141,"mtime":1615292681565,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"5138h8",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"34"},"/tmp/TorrServer/web/src/index.js",[],["66","67"],"/tmp/TorrServer/web/src/App.js",[],"/tmp/TorrServer/web/src/components/Appbar.js",[],"/tmp/TorrServer/web/src/components/TorrentList.js",[],"/tmp/TorrServer/web/src/components/Add.js",[],"/tmp/TorrServer/web/src/components/RemoveAll.js",[],"/tmp/TorrServer/web/src/components/Settings.js",["68"],"/tmp/TorrServer/web/src/components/About.js",[],"/tmp/TorrServer/web/src/components/Upload.js",[],"/tmp/TorrServer/web/src/components/Donate.js",[],"/tmp/TorrServer/web/src/utils/Hosts.js",[],"/tmp/TorrServer/web/src/components/Torrent.js",[],"/tmp/TorrServer/web/src/utils/Utils.js",[],["69","70"],"/tmp/TorrServer/web/src/components/DialogTorrentInfo.js",["71","72","73","74","75"],"import React, { useEffect } from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport { Button, ButtonGroup, Grid, List, ListItem } from '@material-ui/core'\nimport CachedIcon from '@material-ui/icons/Cached'\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nimport { getPeerString, humanizeSize } from '../utils/Utils'\nimport { playlistTorrHost, streamHost, viewedHost } from '../utils/Hosts'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogContent from '@material-ui/core/DialogContent'\n\nconst style = {\n    width100: {\n        width: '100%',\n    },\n    width80: {\n        width: '80%',\n    },\n    poster: {\n        display: 'flex',\n        flexDirection: 'row',\n        borderRadius:'5px',\n    },\n}\n\nexport default function DialogTorrentInfo(props) {\n    const [torrent, setTorrent] = React.useState(props.torrent)\n    const [viewed, setViewed] = React.useState(null)\n    const [progress, setProgress] = React.useState(-1)\n\n    useEffect(() => {\n        setTorrent(props.torrent)\n        if(torrent.stat==2)\n            setProgress(torrent.preloaded_bytes * 100 / torrent.preload_size)\n        getViewed(props.torrent.hash,(list) => {\n            if (list) {\n                let lst = list.map((itm) => itm.file_index)\n                setViewed(lst)\n            }else\n                setViewed(null)\n        })\n    }, [props.torrent, props.open])\n\n    return (\n        <div>\n            <DialogTitle id=\"form-dialog-title\">\n                <Grid container spacing={1}>\n                    <Grid item>{torrent.poster && <img alt=\"\" height=\"200\" align=\"left\" style={style.poster} src={torrent.poster} />}</Grid>\n                    <Grid style={style.width80} item>\n                        {torrent.title} {torrent.name && torrent.name !== torrent.title && ' | ' + torrent.name}\n                        <Typography>\n                            <b>Peers: </b> {getPeerString(torrent)}\n                            <br />\n                            <b>Loaded: </b> {getPreload(torrent)}\n                            <br />\n                            <b>Speed: </b> {humanizeSize(torrent.download_speed)}\n                            <br />\n                            <b>Status: </b> {torrent.stat_string}\n                            <br />\n                        </Typography>\n                    </Grid>\n                </Grid>\n                {torrent.stat==2 && <LinearProgress style={{marginTop:'10px'}} variant=\"determinate\" value={progress} />}\n            </DialogTitle>\n            <DialogContent>\n                <List>\n                    <ListItem>\n                        <ButtonGroup style={style.width100} variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n                            <Button style={style.width100} href={playlistTorrHost() + '/' + encodeURIComponent(torrent.name || torrent.title || 'file') + '.m3u?link=' + torrent.hash + '&m3u'}>\n                                Playlist\n                            </Button>\n                            <Button style={style.width100} href={playlistTorrHost() + '/' + encodeURIComponent(torrent.name || torrent.title || 'file') + '.m3u?link=' + torrent.hash + '&m3u&fromlast'}>\n                                Playlist after last view\n                            </Button>\n                        </ButtonGroup>\n                    </ListItem>\n                    {getPlayableFile(torrent) &&\n                        getPlayableFile(torrent).map((file) => (\n                            <ButtonGroup style={style.width100} disableElevation variant=\"contained\" color=\"primary\">\n                                <Button\n                                    style={style.width100}\n                                    href={streamHost() + '/' + encodeURIComponent(file.path.split('\\\\').pop().split('/').pop()) + '?link=' + torrent.hash + '&index=' + file.id + '&play'}\n                                >\n                                    <Typography>\n                                        {file.path.split('\\\\').pop().split('/').pop()} | {humanizeSize(file.length)} {viewed && viewed.indexOf(file.id)!=-1 && \"| âœ“\"}\n                                    </Typography>\n                                </Button>\n                                <Button onClick={() => fetch(streamHost() + '?link=' + torrent.hash + '&index=' + file.id + '&preload')}>\n                                    <CachedIcon />\n                                    <Typography>Preload</Typography>\n                                </Button>\n                            </ButtonGroup>\n                        ))}\n                </List>\n            </DialogContent>\n        </div>\n    )\n}\n\nfunction getViewed(hash, callback) {\n    try {\n        fetch(viewedHost(), {\n            method: 'post',\n            body: JSON.stringify({ action: 'list', hash: hash }),\n            headers: {\n                Accept: 'application/json, text/plain, */*',\n                'Content-Type': 'application/json',\n            },\n        })\n            .then((res) => res.json())\n            .then(\n                (json) => {\n                    callback(json)\n                },\n                (error) => {\n                    callback(null)\n                }\n            )\n    } catch (e) {\n        console.error(e)\n    }\n}\n\nfunction getPlayableFile(torrent){\n    if (!torrent || !torrent.file_stats)\n        return null\n    return torrent.file_stats.filter(file => extPlayable.includes(getExt(file.path)))\n}\n\nfunction getExt(filename){\n    const ext = filename.split('.').pop()\n    if (ext == filename)\n        return ''\n    return ext.toLowerCase()\n}\n\nfunction getPreload(torrent) {\n    if (torrent.preloaded_bytes > 0 && torrent.preload_size > 0 && torrent.preloaded_bytes < torrent.preload_size) {\n        let progress = ((torrent.preloaded_bytes * 100) / torrent.preload_size).toFixed(2)\n        return humanizeSize(torrent.preloaded_bytes) + ' / ' + humanizeSize(torrent.preload_size) + '   ' + progress + '%'\n    }\n\n    if (!torrent.preloaded_bytes) return humanizeSize(0)\n\n    return humanizeSize(torrent.preloaded_bytes)\n}\n\nconst extPlayable = [\n// video\n    \"3g2\",\n    \"3gp\",\n    \"aaf\",\n    \"asf\",\n    \"avchd\",\n    \"avi\",\n    \"drc\",\n    \"flv\",\n    \"iso\",\n    \"m2v\",\n    \"m2ts\",\n    \"m4p\",\n    \"m4v\",\n    \"mkv\",\n    \"mng\",\n    \"mov\",\n    \"mp2\",\n    \"mp4\",\n    \"mpe\",\n    \"mpeg\",\n    \"mpg\",\n    \"mpv\",\n    \"mxf\",\n    \"nsv\",\n    \"ogg\",\n    \"ogv\",\n    \"ts\",\n    \"qt\",\n    \"rm\",\n    \"rmvb\",\n    \"roq\",\n    \"svi\",\n    \"vob\",\n    \"webm\",\n    \"wmv\",\n    \"yuv\",\n// audio\n    \"aac\",\n    \"aiff\",\n    \"ape\",\n    \"au\",\n    \"flac\",\n    \"gsm\",\n    \"it\",\n    \"m3u\",\n    \"m4a\",\n    \"mid\",\n    \"mod\",\n    \"mp3\",\n    \"mpa\",\n    \"pls\",\n    \"ra\",\n    \"s3m\",\n    \"sid\",\n    \"wav\",\n    \"wma\",\n    \"xm\"\n]\n","/tmp/TorrServer/web/src/components/DialogCacheInfo.js",["76"],"import React, { useEffect, useRef } from 'react'\nimport Typography from '@material-ui/core/Typography'\n\nimport { getPeerString, humanizeSize } from '../utils/Utils'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport { cacheHost } from '../utils/Hosts'\n\nexport default function DialogCacheInfo(props) {\n    const [hash] = React.useState(props.hash)\n    const [cache, setCache] = React.useState({})\n    const timerID = useRef(-1)\n\n    useEffect(() => {\n        if (hash)\n            timerID.current = setInterval(() => {\n                getCache(hash, (cache) => {\n                    setCache(cache)\n                })\n            }, 100)\n        else clearInterval(timerID.current)\n\n        return () => {\n            clearInterval(timerID.current)\n        }\n    }, [hash, props.open])\n\n    return (\n        <div>\n            <DialogTitle id=\"form-dialog-title\">\n                <Typography fullWidth>\n                    <b>Hash </b> {cache.Hash}\n                    <br />\n                    <b>Capacity </b> {humanizeSize(cache.Capacity)}\n                    <br />\n                    <b>Filled </b> {humanizeSize(cache.Filled)}\n                    <br />\n                    <b>Torrent size </b> {cache.Torrent && cache.Torrent.torrent_size && humanizeSize(cache.Torrent.torrent_size)}\n                    <br />\n                    <b>Pieces length </b> {humanizeSize(cache.PiecesLength)}\n                    <br />\n                    <b>Pieces count </b> {cache.PiecesCount}\n                    <br />\n                    <b>Peers: </b> {getPeerString(cache.Torrent)}\n                    <br />\n                    <b>Download speed </b> {cache.Torrent && cache.Torrent.download_speed ? humanizeSize(cache.Torrent.download_speed) + '/sec' : ''}\n                    <br />\n                    <b>Status </b> {cache.Torrent && cache.Torrent.stat_string && cache.Torrent.stat_string}\n                </Typography>\n            </DialogTitle>\n            <DialogContent>\n                <div className=\"cache\" dangerouslySetInnerHTML={{ __html: getCacheMap(cache) }} />\n            </DialogContent>\n        </div>\n    )\n}\n\nfunction getCacheMap(cache) {\n    if (!cache || !cache.PiecesCount) return ''\n    var html = ''\n    for (let i = 0; i < cache.PiecesCount; i++) {\n        html += \"<span class='piece\"\n        let info = i\n        if (cache.Pieces && cache.Pieces[i]) {\n            let piece = cache.Pieces[i]\n            if (piece.Completed && piece.Size >= piece.Length) {\n                html += ' piece-complete'\n                info += ' 100%'\n            }else {\n                html += ' piece-loading'\n                info += ' ' + (cache.Pieces[i].Size/cache.Pieces[i].Length*100).toFixed(2) + '%'\n            }\n        }\n        cache.Readers.forEach((r,k)=> {\n            if (i >= r.Start && i <= r.End && i !== r.Reader)\n                html += ' reader-range'\n            if (i === r.Reader) {\n                html += ' piece-reader'\n                info += ' reader'\n            }\n        })\n        html += \"' title='\" + info + \"'></span>\"\n    }\n    return html\n}\n\nfunction getCache(hash, callback) {\n    try {\n        fetch(cacheHost(), {\n            method: 'post',\n            body: JSON.stringify({ action: 'get', hash: hash }),\n            headers: {\n                Accept: 'application/json, text/plain, */*',\n                'Content-Type': 'application/json',\n            },\n        })\n            .then((res) => res.json())\n            .then(\n                (json) => {\n                    callback(json)\n                },\n                (error) => {\n                    callback({})\n                    console.error(error)\n                }\n            )\n    } catch (e) {\n        console.error(e)\n        callback({})\n    }\n}\n/*\n{\n\t\"Hash\": \"41e36c8de915d80db83fc134bee4e7e2d292657e\",\n\t\"Capacity\": 209715200,\n\t\"Filled\": 2914808,\n\t\"PiecesLength\": 4194304,\n\t\"PiecesCount\": 2065,\n\t\"DownloadSpeed\": 32770.860273455524,\n\t\"Pieces\": {\n\t\t\"2064\": {\n\t\t\t\"Id\": 2064,\n\t\t\t\"Length\": 2914808,\n\t\t\t\"Size\": 162296,\n\t\t\t\"Completed\": false\n\t\t}\n\t}\n}\n */\n",{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":105,"column":29,"nodeType":"83","endLine":105,"endColumn":35},{"ruleId":"77","replacedBy":"84"},{"ruleId":"79","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":33,"column":24,"nodeType":"88","messageId":"89","endLine":33,"endColumn":26},{"ruleId":"90","severity":1,"message":"91","line":42,"column":8,"nodeType":"92","endLine":42,"endColumn":35,"suggestions":"93"},{"ruleId":"86","severity":1,"message":"87","line":63,"column":30,"nodeType":"88","messageId":"89","endLine":63,"endColumn":32},{"ruleId":"86","severity":1,"message":"94","line":85,"column":152,"nodeType":"88","messageId":"89","endLine":85,"endColumn":154},{"ruleId":"86","severity":1,"message":"87","line":132,"column":13,"nodeType":"88","messageId":"89","endLine":132,"endColumn":15},{"ruleId":"95","severity":1,"message":"96","line":74,"column":31,"nodeType":"97","messageId":"98","endLine":81,"endColumn":10},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement",["99"],["100"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'torrent.preload_size', 'torrent.preloaded_bytes', and 'torrent.stat'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setProgress' needs the current value of 'torrent.preloaded_bytes'.","ArrayExpression",["101"],"Expected '!==' and instead saw '!='.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'html', 'html'.","ArrowFunctionExpression","unsafeRefs","no-global-assign","no-unsafe-negation",{"desc":"102","fix":"103"},"Update the dependencies array to be: [props.torrent, props.open, torrent.stat, torrent.preloaded_bytes, torrent.preload_size]",{"range":"104","text":"105"},[1371,1398],"[props.torrent, props.open, torrent.stat, torrent.preloaded_bytes, torrent.preload_size]"]